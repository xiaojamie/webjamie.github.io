var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var expression_exports = {};
__export(expression_exports, {
  default: () => read_expression,
  parse_expression_at: () => parse_expression_at
});
var import__2 = __toESM(require("../index.js"));
function peek_char(state) {
  return state.source[state.index];
}
function peek_nonwhitespace(state) {
  let index = state.index;
  do {
    let char = state.source[index];
    if (!/\s/.test(char)) {
      return char;
    }
    index++;
  } while (index < state.source.length);
}
function next_char(state) {
  return state.source[state.index++];
}
function in_bounds(state) {
  return state.index < state.source.length;
}
function consume_string(state, stringChar) {
  let inEscape;
  do {
    const char = next_char(state);
    if (inEscape) {
      inEscape = false;
    } else if (char === "\\") {
      inEscape = true;
    } else if (char === stringChar) {
      break;
    }
  } while (in_bounds(state));
}
function consume_multiline_comment(state) {
  do {
    const char = next_char(state);
    if (char === "*" && peek_char(state) === "/") {
      break;
    }
  } while (in_bounds(state));
}
function consume_line_comment(state) {
  do {
    const char = next_char(state);
    if (char === "\n") {
      break;
    }
  } while (in_bounds(state));
}
const voidElements = /* @__PURE__ */ new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
function consume_tag(state) {
  const start = state.index - 1;
  let tagName = "";
  let inTag = false;
  let inStart = true;
  let selfClosed = false;
  let inClose = false;
  let bracketIndex = 1;
  do {
    const char = next_char(state);
    switch (char) {
      case "'":
      case '"':
      case "`": {
        consume_string(state, char);
        break;
      }
      case "<": {
        inTag = false;
        tagName = "";
        if (peek_nonwhitespace(state) === "/") {
          inClose = true;
          bracketIndex--;
        } else {
          inStart = true;
          bracketIndex++;
        }
        break;
      }
      case ">": {
        if (!inStart && !inClose) {
          break;
        }
        bracketIndex--;
        const addExpectedBrackets = !voidElements.has(tagName.toLowerCase()) && !selfClosed && !inClose;
        if (addExpectedBrackets) {
          bracketIndex += 2;
        }
        inTag = false;
        selfClosed = false;
        inStart = false;
        inClose = false;
        break;
      }
      case " ": {
        inTag = true;
        break;
      }
      case "/": {
        if (inStart) {
          selfClosed = true;
        }
        break;
      }
      default: {
        if (!inTag) {
          tagName += char;
        }
        break;
      }
    }
    if (state.curlyCount <= 0) {
      break;
    }
    if (bracketIndex === 0) {
      break;
    }
  } while (in_bounds(state));
  const source = state.source.substring(start, state.index);
  const ast = (0, import__2.default)(source);
  state.parser.feature_flags |= ast.meta.features;
  const fragment = ast.html;
  return fragment;
}
function consume_expression(parser, source, start) {
  const expr = {
    type: "Expression",
    start,
    end: Number.NaN,
    codeChunks: [],
    children: []
  };
  let codeStart = start;
  const state = {
    source,
    start,
    index: start,
    curlyCount: 1,
    bracketCount: 0,
    root: expr,
    parser
  };
  do {
    const char = next_char(state);
    switch (char) {
      case "{": {
        state.curlyCount++;
        break;
      }
      case "}": {
        state.curlyCount--;
        break;
      }
      case "<": {
        const chunk = source.substring(codeStart, state.index - 1);
        expr.codeChunks.push(chunk);
        const tag = consume_tag(state);
        expr.children.push(tag);
        codeStart = state.index;
        break;
      }
      case "'":
      case '"':
      case "`": {
        consume_string(state, char);
        break;
      }
      case "/": {
        switch (peek_char(state)) {
          case "/": {
            consume_line_comment(state);
            break;
          }
          case "*": {
            consume_multiline_comment(state);
            break;
          }
        }
      }
    }
  } while (in_bounds(state) && state.curlyCount > 0);
  expr.end = state.index - 1;
  if (expr.children.length || !expr.codeChunks.length) {
    expr.codeChunks.push(source.substring(codeStart, expr.end));
  }
  return expr;
}
const parse_expression_at = (parser, source, index) => {
  const expression = consume_expression(parser, source, index);
  return expression;
};
function read_expression(parser) {
  try {
    const expression = parse_expression_at(parser, parser.template, parser.index);
    parser.index = expression.end;
    return expression;
  } catch (err) {
    parser.acorn_error(err);
  }
}
module.exports = __toCommonJS(expression_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parse_expression_at
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3BhcnNlL3JlYWQvZXhwcmVzc2lvbi50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxnQkFBdUI7QUFZdkIsbUJBQW1CLE9BQW1CO0FBQ3JDLFNBQU8sTUFBTSxPQUFPLE1BQU07QUFDM0I7QUFFQSw0QkFBNEIsT0FBbUI7QUFDOUMsTUFBSSxRQUFRLE1BQU07QUFDbEIsS0FBRztBQUNGLFFBQUksT0FBTyxNQUFNLE9BQU87QUFDeEIsUUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEdBQUc7QUFDckIsYUFBTztBQUFBLElBQ1I7QUFDQTtBQUFBLEVBQ0QsU0FBUyxRQUFRLE1BQU0sT0FBTztBQUMvQjtBQUVBLG1CQUFtQixPQUFtQjtBQUNyQyxTQUFPLE1BQU0sT0FBTyxNQUFNO0FBQzNCO0FBRUEsbUJBQW1CLE9BQW1CO0FBQ3JDLFNBQU8sTUFBTSxRQUFRLE1BQU0sT0FBTztBQUNuQztBQUVBLHdCQUF3QixPQUFtQixZQUFvQjtBQUM5RCxNQUFJO0FBQ0osS0FBRztBQUNGLFVBQU0sT0FBTyxVQUFVLEtBQUs7QUFFNUIsUUFBSSxVQUFVO0FBQ2IsaUJBQVc7QUFBQSxJQUNaLFdBQVcsU0FBUyxNQUFNO0FBQ3pCLGlCQUFXO0FBQUEsSUFDWixXQUFXLFNBQVMsWUFBWTtBQUMvQjtBQUFBLElBQ0Q7QUFBQSxFQUNELFNBQVMsVUFBVSxLQUFLO0FBQ3pCO0FBRUEsbUNBQW1DLE9BQW1CO0FBQ3JELEtBQUc7QUFDRixVQUFNLE9BQU8sVUFBVSxLQUFLO0FBRTVCLFFBQUksU0FBUyxPQUFPLFVBQVUsS0FBSyxNQUFNLEtBQUs7QUFDN0M7QUFBQSxJQUNEO0FBQUEsRUFDRCxTQUFTLFVBQVUsS0FBSztBQUN6QjtBQUVBLDhCQUE4QixPQUFtQjtBQUNoRCxLQUFHO0FBQ0YsVUFBTSxPQUFPLFVBQVUsS0FBSztBQUM1QixRQUFJLFNBQVMs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
