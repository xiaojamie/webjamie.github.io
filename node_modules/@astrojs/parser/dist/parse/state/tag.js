var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var tag_exports = {};
__export(tag_exports, {
  default: () => tag,
  read_sequence: () => read_sequence
});
var import_expression = __toESM(require("../read/expression.js"));
var import_style = __toESM(require("../read/style.js"));
var import_html = require("../utils/html.js");
var import_names = require("../../utils/names.js");
var import_fuzzymatch = __toESM(require("../../utils/fuzzymatch.js"));
var import_list = __toESM(require("../../utils/list.js"));
var import_features = require("../utils/features.js");
const valid_tag_name = /^\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\-]*/;
const meta_tags = /* @__PURE__ */ new Map([
  ["astro:head", "Head"],
  ["", "SlotTemplate"]
]);
const valid_meta_tags = Array.from(meta_tags.keys());
const specials = /* @__PURE__ */ new Map([
  [
    "style",
    {
      read: import_style.default,
      property: "css"
    }
  ]
]);
const SELF = /^astro:self(?=[\s/>])/;
const COMPONENT = /^astro:component(?=[\s/>])/;
const SLOT = /^astro:fragment(?=[\s/>])/;
const HEAD = /^head(?=[\s/>])/;
const CUSTOM_ELEMENT = /-/;
function parent_is_head(stack) {
  let i = stack.length;
  while (i--) {
    const { type } = stack[i];
    if (type === "Head")
      return true;
    if (type === "Element" || type === "InlineComponent")
      return false;
  }
  return false;
}
function tag(parser) {
  const start = parser.index++;
  let parent = parser.current();
  if (parser.eat("!--")) {
    const data = parser.read_until(/-->/);
    parser.eat("-->", true, "comment was left open, expected -->");
    parser.current().children.push({
      start,
      end: parser.index,
      type: "Comment",
      data
    });
    return;
  }
  const is_closing_tag = parser.eat("/");
  const name = read_tag_name(parser);
  if (CUSTOM_ELEMENT.test(name)) {
    parser.feature_flags |= import_features.FEATURE_CUSTOM_ELEMENT;
  }
  if (meta_tags.has(name)) {
    const slug = meta_tags.get(name).toLowerCase();
    if (is_closing_tag) {
      if ((name === "astro:window" || name === "astro:body") && parser.current().children.length) {
        parser.error({
          code: `invalid-${slug}-content`,
          message: `<${name}> cannot have children`
        }, parser.current().children[0].start);
      }
    } else {
      if (name in parser.meta_tags) {
        parser.error({
          code: `duplicate-${slug}`,
          message: `A component can only have one <${name}> tag`
        }, start);
      }
      if (parser.stack.length > 1) {
        parser.error({
          code: `invalid-${slug}-placement`,
          message: `<${name}> tags cannot be inside elements or blocks`
        }, start);
      }
      parser.meta_tags[name] = true;
    }
  }
  const type = meta_tags.has(name) ? meta_tags.get(name) : /[A-Z]/.test(name[0]) || name === "astro:self" || name === "astro:component" ? "InlineComponent" : name === "" ? "SlotTemplate" : name === "title" && parent_is_head(parser.stack) ? "Title" : name === "slot" && !parser.customElement ? "Slot" : "Element";
  const element = {
    start,
    end: null,
    type,
    name,
    attributes: [],
    children: []
  };
  parser.allow_whitespace();
  if (is_closing_tag) {
    if ((0, import_names.is_void)(name)) {
      parser.error({
        code: "invalid-void-content",
        message: `<${name}> is a void element and cannot have children, or a closing tag`
      }, start);
    }
    parser.eat(">", true);
    while (parent.name !== name) {
      if (parent.type !== "Element") {
        const message = parser.last_auto_closed_tag && parser.last_auto_closed_tag.tag === name ? `</${name}> attempted to close <${name}> that was already automatically closed by <${parser.last_auto_closed_tag.reason}>` : `</${name}> attempted to close an element that was not open`;
        parser.error({
          code: "invalid-closing-tag",
          message
        }, start);
      }
      parent.end = start;
      parser.stack.pop();
      parent = parser.current();
    }
    parent.end = parser.index;
    parser.stack.pop();
    if (parser.last_auto_closed_tag && parser.stack.length < parser.last_auto_closed_tag.depth) {
      parser.last_auto_closed_tag = null;
    }
    return;
  } else if ((0, import_html.closing_tag_omitted)(parent.name, name)) {
    parent.end = start;
    parser.stack.pop();
    parser.last_auto_closed_tag = {
      tag: parent.name,
      reason: name,
      depth: parser.stack.length
    };
  }
  const unique_names = /* @__PURE__ */ new Set();
  let attribute;
  while (attribute = read_attribute(parser, unique_names)) {
    element.attributes.push(attribute);
    parser.allow_whitespace();
  }
  if (name === "astro:component") {
    const index = element.attributes.findIndex((attr) => attr.type === "Attribute" && attr.name === "this");
    if (!~index) {
      parser.error({
        code: "missing-component-definition",
        message: "<astro:component> must have a 'this' attribute"
      }, start);
    }
    const definition = element.attributes.splice(index, 1)[0];
    if (definition.value === true || definition.value.length !== 1 || definition.value[0].type === "Text") {
      parser.error({
        code: "invalid-component-definition",
        message: "invalid component definition"
      }, definition.start);
    }
    element.expression = definition.value[0].expression;
  }
  if (specials.has(name) && parser.stack.length === 1) {
    const special = specials.get(name);
    parser.eat(">", true);
    const content = special.read(parser, start, element.attributes);
    if (content)
      parser[special.property].push(content);
    return;
  }
  parser.current().children.push(element);
  const self_closing = parser.eat("/") || (0, import_names.is_void)(name);
  parser.eat(">", true);
  if (self_closing) {
    element.end = parser.index;
  } else if (name === "textarea") {
    element.children = read_sequence(parser, () => parser.template.slice(parser.index, parser.index + 11) === "</textarea>");
    parser.read(/<\/textarea>/);
    element.end = parser.index;
  } else if (name === "script" || name === "style") {
    const start2 = parser.index;
    const data = parser.read_until(new RegExp(`</${name}>`));
    const end = parser.index;
    element.children.push({ start: start2, end, type: "Text", data });
    parser.eat(`</${name}>`, true);
    element.end = parser.index;
  } else {
    parser.stack.push(element);
  }
}
function read_tag_name(parser) {
  const start = parser.index;
  if (parser.read(SELF)) {
    let i = parser.stack.length;
    let legal = false;
    while (i--) {
      const fragment = parser.stack[i];
      if (fragment.type === "IfBlock" || fragment.type === "EachBlock" || fragment.type === "InlineComponent") {
        legal = true;
        break;
      }
    }
    if (!legal) {
      parser.error({
        code: "invalid-self-placement",
        message: "<astro:self> components can only exist inside {#if} blocks, {#each} blocks, or slots passed to components"
      }, start);
    }
    return "astro:self";
  }
  if (parser.read(COMPONENT))
    return "astro:component";
  if (parser.read(SLOT))
    return "astro:fragment";
  if (parser.read(HEAD))
    return "head";
  const name = parser.read_until(/(\s|\/|>)/);
  if (meta_tags.has(name))
    return name;
  if (name.startsWith("astro:")) {
    const match = (0, import_fuzzymatch.default)(name.slice(7), valid_meta_tags);
    let message = `Valid <astro:...> tag names are ${(0, import_list.default)(valid_meta_tags)}`;
    if (match)
      message += ` (did you mean '${match}'?)`;
    parser.error({
      code: "invalid-tag-name",
      message
    }, start);
  }
  if (!valid_tag_name.test(name)) {
    parser.error({
      code: "invalid-tag-name",
      message: "Expected valid tag name"
    }, start);
  }
  return name;
}
function read_attribute(parser, unique_names) {
  const start = parser.index;
  function check_unique(name2) {
    if (unique_names.has(name2)) {
      parser.error({
        code: "duplicate-attribute",
        message: "Attributes need to be unique"
      }, start);
    }
    unique_names.add(name2);
  }
  if (parser.eat("{")) {
    parser.allow_whitespace();
    if (parser.eat("...")) {
      const expression = (0, import_expression.default)(parser);
      parser.allow_whitespace();
      parser.eat("}", true);
      return {
        start,
        end: parser.index,
        type: "Spread",
        expression
      };
    } else {
      const value_start = parser.index;
      const name2 = parser.read_identifier();
      parser.allow_whitespace();
      parser.eat("}", true);
      check_unique(name2);
      return {
        start,
        end: parser.index,
        type: "Attribute",
        name: name2,
        value: [
          {
            start: value_start,
            end: value_start + name2.length,
            type: "AttributeShorthand",
            expression: {
              start: value_start,
              end: value_start + name2.length,
              type: "Identifier",
              name: name2
            }
          }
        ]
      };
    }
  }
  const name = parser.read_until(/[\s=\/>"']/);
  if (!name)
    return null;
  let end = parser.index;
  parser.allow_whitespace();
  let value = true;
  if (parser.eat("=")) {
    parser.allow_whitespace();
    value = read_attribute_value(parser);
    end = parser.index;
  } else if (parser.match_regex(/["']/)) {
    parser.error({
      code: "unexpected-token",
      message: "Expected ="
    }, parser.index);
  }
  check_unique(name);
  return {
    start,
    end,
    type: "Attribute",
    name,
    value
  };
}
function read_attribute_value(parser) {
  const quote_mark = parser.eat("'") ? "'" : parser.eat('"') ? '"' : null;
  const regex = quote_mark === "'" ? /'/ : quote_mark === '"' ? /"/ : /(\/>|[\s"'=<>`])/;
  const value = read_sequence(parser, () => !!parser.match_regex(regex));
  if (quote_mark)
    parser.index += 1;
  return value;
}
function read_sequence(parser, done) {
  let current_chunk = {
    start: parser.index,
    end: null,
    type: "Text",
    raw: "",
    data: null
  };
  function flush() {
    if (current_chunk.raw) {
      current_chunk.data = (0, import_html.decode_character_references)(current_chunk.raw);
      current_chunk.end = parser.index;
      chunks.push(current_chunk);
    }
  }
  const chunks = [];
  while (parser.index < parser.template.length) {
    const index = parser.index;
    if (done()) {
      flush();
      return chunks;
    } else if (parser.eat("{")) {
      flush();
      parser.allow_whitespace();
      const expression = (0, import_expression.default)(parser);
      parser.allow_whitespace();
      parser.eat("}", true);
      chunks.push({
        start: index,
        end: parser.index,
        type: "MustacheTag",
        expression
      });
      current_chunk = {
        start: parser.index,
        end: null,
        type: "Text",
        raw: "",
        data: null
      };
    } else {
      current_chunk.raw += parser.template[parser.index++];
    }
  }
  parser.error({
    code: "unexpected-eof",
    message: "Unexpected end of input"
  });
}
module.exports = __toCommonJS(tag_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  read_sequence
});
//# sourceMappingURL=data:application/json;base64,
